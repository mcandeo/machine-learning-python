setwd("~/Documents/MachineLearningCodes/Deep Learning/Artificial Neural Network")
#Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
View(dataset)
dataset = dataset[4:14]
View(dataset)
#Encoding the categorical data
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#Feature Scaling
training_set = scale(training_set[-11])
test_set = scale(test_set[-11])
View(training_set)
View(test_set)
#Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
#Encoding the categorical data
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
#Splitting the dataset into training set and test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
View(test_set)
install.packages('h2o')
library(h2o)
install.packages("h2o")
library(h2o)
install.packages(c("backports", "fs", "ggplot2", "isoband", "jsonlite", "knitr", "nloptr", "tinytex", "xfun"))
install.packages('h20')
install.packages('h20')
install.packages('h2o')
install.packages('rcurl')
install.packages('RCurl')
install.packages('RCurl')
install.packages('h2o')
library(h2o)
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(2, 6),
epochs = 100,
train_samples_per_iteration = -2)
View(classifier)
install.packages("data.table")
classifier = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(2, 6),
epochs = 100,
train_samples_per_iteration = -2)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
View(prob_pred)
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
#Making the confusion matrix
cm = table(test_set[, 11], y_pred)
#Making the confusion matrix
cm = table(test_set[, 11], y_pred)
(1531+269)/2000
cm
(1531 + 138)/2000
h2o.shutdown()
h2o.shutdown()
